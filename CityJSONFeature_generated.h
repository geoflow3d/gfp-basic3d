// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CITYJSONFEATURE_CITYFB_H_
#define FLATBUFFERS_GENERATED_CITYJSONFEATURE_CITYFB_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"
#include "flatbuffers/flex_flat_util.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace CityFB {

struct Vertex;

struct CityJSONFeature;
struct CityJSONFeatureBuilder;

struct CityObject;
struct CityObjectBuilder;

struct Geometry;
struct GeometryBuilder;

struct gMultiSurface;
struct gMultiSurfaceBuilder;

struct gSolid;
struct gSolidBuilder;

struct gShell;
struct gShellBuilder;

struct gSurface;
struct gSurfaceBuilder;

struct gRing;
struct gRingBuilder;

struct Semantic;
struct SemanticBuilder;

struct Surface;
struct SurfaceBuilder;

enum CityObjectType : int16_t {
  CityObjectType_Building = 0,
  CityObjectType_BuildingPart = 1,
  CityObjectType_MIN = CityObjectType_Building,
  CityObjectType_MAX = CityObjectType_BuildingPart
};

inline const CityObjectType (&EnumValuesCityObjectType())[2] {
  static const CityObjectType values[] = {
    CityObjectType_Building,
    CityObjectType_BuildingPart
  };
  return values;
}

inline const char * const *EnumNamesCityObjectType() {
  static const char * const names[3] = {
    "Building",
    "BuildingPart",
    nullptr
  };
  return names;
}

inline const char *EnumNameCityObjectType(CityObjectType e) {
  if (flatbuffers::IsOutRange(e, CityObjectType_Building, CityObjectType_BuildingPart)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCityObjectType()[index];
}

enum Boundary : uint8_t {
  Boundary_NONE = 0,
  Boundary_gSolid = 1,
  Boundary_gMultiSurface = 2,
  Boundary_MIN = Boundary_NONE,
  Boundary_MAX = Boundary_gMultiSurface
};

inline const Boundary (&EnumValuesBoundary())[3] {
  static const Boundary values[] = {
    Boundary_NONE,
    Boundary_gSolid,
    Boundary_gMultiSurface
  };
  return values;
}

inline const char * const *EnumNamesBoundary() {
  static const char * const names[4] = {
    "NONE",
    "gSolid",
    "gMultiSurface",
    nullptr
  };
  return names;
}

inline const char *EnumNameBoundary(Boundary e) {
  if (flatbuffers::IsOutRange(e, Boundary_NONE, Boundary_gMultiSurface)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBoundary()[index];
}

template<typename T> struct BoundaryTraits {
  static const Boundary enum_value = Boundary_NONE;
};

template<> struct BoundaryTraits<CityFB::gSolid> {
  static const Boundary enum_value = Boundary_gSolid;
};

template<> struct BoundaryTraits<CityFB::gMultiSurface> {
  static const Boundary enum_value = Boundary_gMultiSurface;
};

bool VerifyBoundary(flatbuffers::Verifier &verifier, const void *obj, Boundary type);
bool VerifyBoundaryVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vertex FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t x_;
  uint32_t y_;
  uint32_t z_;

 public:
  Vertex()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vertex(uint32_t _x, uint32_t _y, uint32_t _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  uint32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  uint32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  uint32_t z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vertex, 12);

struct CityJSONFeature FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CityJSONFeatureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CITY_OBJECTS = 6,
    VT_VERTICES = 8
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::CityObject>> *city_objects() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::CityObject>> *>(VT_CITY_OBJECTS);
  }
  const flatbuffers::Vector<const CityFB::Vertex *> *vertices() const {
    return GetPointer<const flatbuffers::Vector<const CityFB::Vertex *> *>(VT_VERTICES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CITY_OBJECTS) &&
           verifier.VerifyVector(city_objects()) &&
           verifier.VerifyVectorOfTables(city_objects()) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.EndTable();
  }
};

struct CityJSONFeatureBuilder {
  typedef CityJSONFeature Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(CityJSONFeature::VT_ID, id);
  }
  void add_city_objects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::CityObject>>> city_objects) {
    fbb_.AddOffset(CityJSONFeature::VT_CITY_OBJECTS, city_objects);
  }
  void add_vertices(flatbuffers::Offset<flatbuffers::Vector<const CityFB::Vertex *>> vertices) {
    fbb_.AddOffset(CityJSONFeature::VT_VERTICES, vertices);
  }
  explicit CityJSONFeatureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CityJSONFeature> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CityJSONFeature>(end);
    return o;
  }
};

inline flatbuffers::Offset<CityJSONFeature> CreateCityJSONFeature(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::CityObject>>> city_objects = 0,
    flatbuffers::Offset<flatbuffers::Vector<const CityFB::Vertex *>> vertices = 0) {
  CityJSONFeatureBuilder builder_(_fbb);
  builder_.add_vertices(vertices);
  builder_.add_city_objects(city_objects);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<CityJSONFeature> CreateCityJSONFeatureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    std::vector<flatbuffers::Offset<CityFB::CityObject>> *city_objects = nullptr,
    const std::vector<CityFB::Vertex> *vertices = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto city_objects__ = city_objects ? _fbb.CreateVectorOfSortedTables<CityFB::CityObject>(city_objects) : 0;
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<CityFB::Vertex>(*vertices) : 0;
  return CityFB::CreateCityJSONFeature(
      _fbb,
      id__,
      city_objects__,
      vertices__);
}

struct CityObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CityObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ID = 6,
    VT_ATTRIBUTES = 8,
    VT_GEOMETRY = 10,
    VT_CHILDREN = 12,
    VT_PARENT = 14
  };
  CityFB::CityObjectType type() const {
    return static_cast<CityFB::CityObjectType>(GetField<int16_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool KeyCompareLessThan(const CityObject * const o) const {
    return *id() < *o->id();
  }
  int KeyCompareWithValue(const char *_id) const {
    return strcmp(id()->c_str(), _id);
  }
  const flatbuffers::Vector<uint8_t> *attributes() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ATTRIBUTES);
  }
  flexbuffers::Reference attributes_flexbuffer_root() const {
    return flexbuffers::GetRoot(attributes()->Data(), attributes()->size());
  }
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::Geometry>> *geometry() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::Geometry>> *>(VT_GEOMETRY);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *children() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CHILDREN);
  }
  const flatbuffers::String *parent() const {
    return GetPointer<const flatbuffers::String *>(VT_PARENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_TYPE, 2) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           flexbuffers::VerifyNestedFlexBuffer(attributes(), verifier) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyVector(geometry()) &&
           verifier.VerifyVectorOfTables(geometry()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfStrings(children()) &&
           VerifyOffset(verifier, VT_PARENT) &&
           verifier.VerifyString(parent()) &&
           verifier.EndTable();
  }
};

struct CityObjectBuilder {
  typedef CityObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(CityFB::CityObjectType type) {
    fbb_.AddElement<int16_t>(CityObject::VT_TYPE, static_cast<int16_t>(type), 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(CityObject::VT_ID, id);
  }
  void add_attributes(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> attributes) {
    fbb_.AddOffset(CityObject::VT_ATTRIBUTES, attributes);
  }
  void add_geometry(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::Geometry>>> geometry) {
    fbb_.AddOffset(CityObject::VT_GEOMETRY, geometry);
  }
  void add_children(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> children) {
    fbb_.AddOffset(CityObject::VT_CHILDREN, children);
  }
  void add_parent(flatbuffers::Offset<flatbuffers::String> parent) {
    fbb_.AddOffset(CityObject::VT_PARENT, parent);
  }
  explicit CityObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CityObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CityObject>(end);
    fbb_.Required(o, CityObject::VT_ID);
    return o;
  }
};

inline flatbuffers::Offset<CityObject> CreateCityObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    CityFB::CityObjectType type = CityFB::CityObjectType_Building,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> attributes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::Geometry>>> geometry = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> children = 0,
    flatbuffers::Offset<flatbuffers::String> parent = 0) {
  CityObjectBuilder builder_(_fbb);
  builder_.add_parent(parent);
  builder_.add_children(children);
  builder_.add_geometry(geometry);
  builder_.add_attributes(attributes);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CityObject> CreateCityObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    CityFB::CityObjectType type = CityFB::CityObjectType_Building,
    const char *id = nullptr,
    const std::vector<uint8_t> *attributes = nullptr,
    const std::vector<flatbuffers::Offset<CityFB::Geometry>> *geometry = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *children = nullptr,
    const char *parent = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto attributes__ = attributes ? _fbb.CreateVector<uint8_t>(*attributes) : 0;
  auto geometry__ = geometry ? _fbb.CreateVector<flatbuffers::Offset<CityFB::Geometry>>(*geometry) : 0;
  auto children__ = children ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*children) : 0;
  auto parent__ = parent ? _fbb.CreateString(parent) : 0;
  return CityFB::CreateCityObject(
      _fbb,
      type,
      id__,
      attributes__,
      geometry__,
      children__,
      parent__);
}

struct Geometry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOD = 4,
    VT_BOUNDARIES_TYPE = 6,
    VT_BOUNDARIES = 8,
    VT_SEMANTICS = 10
  };
  const flatbuffers::String *lod() const {
    return GetPointer<const flatbuffers::String *>(VT_LOD);
  }
  const flatbuffers::Vector<uint8_t> *boundaries_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BOUNDARIES_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *boundaries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_BOUNDARIES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::Semantic>> *semantics() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::Semantic>> *>(VT_SEMANTICS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOD) &&
           verifier.VerifyString(lod()) &&
           VerifyOffset(verifier, VT_BOUNDARIES_TYPE) &&
           verifier.VerifyVector(boundaries_type()) &&
           VerifyOffset(verifier, VT_BOUNDARIES) &&
           verifier.VerifyVector(boundaries()) &&
           VerifyBoundaryVector(verifier, boundaries(), boundaries_type()) &&
           VerifyOffset(verifier, VT_SEMANTICS) &&
           verifier.VerifyVector(semantics()) &&
           verifier.VerifyVectorOfTables(semantics()) &&
           verifier.EndTable();
  }
};

struct GeometryBuilder {
  typedef Geometry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lod(flatbuffers::Offset<flatbuffers::String> lod) {
    fbb_.AddOffset(Geometry::VT_LOD, lod);
  }
  void add_boundaries_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> boundaries_type) {
    fbb_.AddOffset(Geometry::VT_BOUNDARIES_TYPE, boundaries_type);
  }
  void add_boundaries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> boundaries) {
    fbb_.AddOffset(Geometry::VT_BOUNDARIES, boundaries);
  }
  void add_semantics(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::Semantic>>> semantics) {
    fbb_.AddOffset(Geometry::VT_SEMANTICS, semantics);
  }
  explicit GeometryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Geometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Geometry>(end);
    return o;
  }
};

inline flatbuffers::Offset<Geometry> CreateGeometry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> lod = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> boundaries_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> boundaries = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::Semantic>>> semantics = 0) {
  GeometryBuilder builder_(_fbb);
  builder_.add_semantics(semantics);
  builder_.add_boundaries(boundaries);
  builder_.add_boundaries_type(boundaries_type);
  builder_.add_lod(lod);
  return builder_.Finish();
}

inline flatbuffers::Offset<Geometry> CreateGeometryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *lod = nullptr,
    const std::vector<uint8_t> *boundaries_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *boundaries = nullptr,
    const std::vector<flatbuffers::Offset<CityFB::Semantic>> *semantics = nullptr) {
  auto lod__ = lod ? _fbb.CreateString(lod) : 0;
  auto boundaries_type__ = boundaries_type ? _fbb.CreateVector<uint8_t>(*boundaries_type) : 0;
  auto boundaries__ = boundaries ? _fbb.CreateVector<flatbuffers::Offset<void>>(*boundaries) : 0;
  auto semantics__ = semantics ? _fbb.CreateVector<flatbuffers::Offset<CityFB::Semantic>>(*semantics) : 0;
  return CityFB::CreateGeometry(
      _fbb,
      lod__,
      boundaries_type__,
      boundaries__,
      semantics__);
}

struct gMultiSurface FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef gMultiSurfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SURFACES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>> *surfaces() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>> *>(VT_SURFACES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SURFACES) &&
           verifier.VerifyVector(surfaces()) &&
           verifier.VerifyVectorOfTables(surfaces()) &&
           verifier.EndTable();
  }
};

struct gMultiSurfaceBuilder {
  typedef gMultiSurface Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_surfaces(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>>> surfaces) {
    fbb_.AddOffset(gMultiSurface::VT_SURFACES, surfaces);
  }
  explicit gMultiSurfaceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<gMultiSurface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<gMultiSurface>(end);
    return o;
  }
};

inline flatbuffers::Offset<gMultiSurface> CreategMultiSurface(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>>> surfaces = 0) {
  gMultiSurfaceBuilder builder_(_fbb);
  builder_.add_surfaces(surfaces);
  return builder_.Finish();
}

inline flatbuffers::Offset<gMultiSurface> CreategMultiSurfaceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<CityFB::gSurface>> *surfaces = nullptr) {
  auto surfaces__ = surfaces ? _fbb.CreateVector<flatbuffers::Offset<CityFB::gSurface>>(*surfaces) : 0;
  return CityFB::CreategMultiSurface(
      _fbb,
      surfaces__);
}

struct gSolid FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef gSolidBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHELLS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::gShell>> *shells() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::gShell>> *>(VT_SHELLS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHELLS) &&
           verifier.VerifyVector(shells()) &&
           verifier.VerifyVectorOfTables(shells()) &&
           verifier.EndTable();
  }
};

struct gSolidBuilder {
  typedef gSolid Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shells(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gShell>>> shells) {
    fbb_.AddOffset(gSolid::VT_SHELLS, shells);
  }
  explicit gSolidBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<gSolid> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<gSolid>(end);
    return o;
  }
};

inline flatbuffers::Offset<gSolid> CreategSolid(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gShell>>> shells = 0) {
  gSolidBuilder builder_(_fbb);
  builder_.add_shells(shells);
  return builder_.Finish();
}

inline flatbuffers::Offset<gSolid> CreategSolidDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<CityFB::gShell>> *shells = nullptr) {
  auto shells__ = shells ? _fbb.CreateVector<flatbuffers::Offset<CityFB::gShell>>(*shells) : 0;
  return CityFB::CreategSolid(
      _fbb,
      shells__);
}

struct gShell FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef gShellBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SURFACES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>> *surfaces() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>> *>(VT_SURFACES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SURFACES) &&
           verifier.VerifyVector(surfaces()) &&
           verifier.VerifyVectorOfTables(surfaces()) &&
           verifier.EndTable();
  }
};

struct gShellBuilder {
  typedef gShell Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_surfaces(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>>> surfaces) {
    fbb_.AddOffset(gShell::VT_SURFACES, surfaces);
  }
  explicit gShellBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<gShell> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<gShell>(end);
    return o;
  }
};

inline flatbuffers::Offset<gShell> CreategShell(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gSurface>>> surfaces = 0) {
  gShellBuilder builder_(_fbb);
  builder_.add_surfaces(surfaces);
  return builder_.Finish();
}

inline flatbuffers::Offset<gShell> CreategShellDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<CityFB::gSurface>> *surfaces = nullptr) {
  auto surfaces__ = surfaces ? _fbb.CreateVector<flatbuffers::Offset<CityFB::gSurface>>(*surfaces) : 0;
  return CityFB::CreategShell(
      _fbb,
      surfaces__);
}

struct gSurface FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef gSurfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RINGS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::gRing>> *rings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::gRing>> *>(VT_RINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RINGS) &&
           verifier.VerifyVector(rings()) &&
           verifier.VerifyVectorOfTables(rings()) &&
           verifier.EndTable();
  }
};

struct gSurfaceBuilder {
  typedef gSurface Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gRing>>> rings) {
    fbb_.AddOffset(gSurface::VT_RINGS, rings);
  }
  explicit gSurfaceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<gSurface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<gSurface>(end);
    return o;
  }
};

inline flatbuffers::Offset<gSurface> CreategSurface(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::gRing>>> rings = 0) {
  gSurfaceBuilder builder_(_fbb);
  builder_.add_rings(rings);
  return builder_.Finish();
}

inline flatbuffers::Offset<gSurface> CreategSurfaceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<CityFB::gRing>> *rings = nullptr) {
  auto rings__ = rings ? _fbb.CreateVector<flatbuffers::Offset<CityFB::gRing>>(*rings) : 0;
  return CityFB::CreategSurface(
      _fbb,
      rings__);
}

struct gRing FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef gRingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES = 4
  };
  const flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct gRingBuilder {
  typedef gRing Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(gRing::VT_INDICES, indices);
  }
  explicit gRingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<gRing> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<gRing>(end);
    return o;
  }
};

inline flatbuffers::Offset<gRing> CreategRing(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> indices = 0) {
  gRingBuilder builder_(_fbb);
  builder_.add_indices(indices);
  return builder_.Finish();
}

inline flatbuffers::Offset<gRing> CreategRingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *indices = nullptr) {
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return CityFB::CreategRing(
      _fbb,
      indices__);
}

struct Semantic FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SemanticBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SURFACES = 4,
    VT_VALUES = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<CityFB::Surface>> *surfaces() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CityFB::Surface>> *>(VT_SURFACES);
  }
  const flatbuffers::Vector<uint32_t> *values() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SURFACES) &&
           verifier.VerifyVector(surfaces()) &&
           verifier.VerifyVectorOfTables(surfaces()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};

struct SemanticBuilder {
  typedef Semantic Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_surfaces(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::Surface>>> surfaces) {
    fbb_.AddOffset(Semantic::VT_SURFACES, surfaces);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> values) {
    fbb_.AddOffset(Semantic::VT_VALUES, values);
  }
  explicit SemanticBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Semantic> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Semantic>(end);
    return o;
  }
};

inline flatbuffers::Offset<Semantic> CreateSemantic(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CityFB::Surface>>> surfaces = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> values = 0) {
  SemanticBuilder builder_(_fbb);
  builder_.add_values(values);
  builder_.add_surfaces(surfaces);
  return builder_.Finish();
}

inline flatbuffers::Offset<Semantic> CreateSemanticDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<CityFB::Surface>> *surfaces = nullptr,
    const std::vector<uint32_t> *values = nullptr) {
  auto surfaces__ = surfaces ? _fbb.CreateVector<flatbuffers::Offset<CityFB::Surface>>(*surfaces) : 0;
  auto values__ = values ? _fbb.CreateVector<uint32_t>(*values) : 0;
  return CityFB::CreateSemantic(
      _fbb,
      surfaces__,
      values__);
}

struct Surface FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SurfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ON_FOOTPRINT_EDGE = 6
  };
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  bool on_footprint_edge() const {
    return GetField<uint8_t>(VT_ON_FOOTPRINT_EDGE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<uint8_t>(verifier, VT_ON_FOOTPRINT_EDGE, 1) &&
           verifier.EndTable();
  }
};

struct SurfaceBuilder {
  typedef Surface Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(Surface::VT_TYPE, type);
  }
  void add_on_footprint_edge(bool on_footprint_edge) {
    fbb_.AddElement<uint8_t>(Surface::VT_ON_FOOTPRINT_EDGE, static_cast<uint8_t>(on_footprint_edge), 0);
  }
  explicit SurfaceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Surface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Surface>(end);
    return o;
  }
};

inline flatbuffers::Offset<Surface> CreateSurface(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    bool on_footprint_edge = false) {
  SurfaceBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_on_footprint_edge(on_footprint_edge);
  return builder_.Finish();
}

inline flatbuffers::Offset<Surface> CreateSurfaceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    bool on_footprint_edge = false) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return CityFB::CreateSurface(
      _fbb,
      type__,
      on_footprint_edge);
}

inline bool VerifyBoundary(flatbuffers::Verifier &verifier, const void *obj, Boundary type) {
  switch (type) {
    case Boundary_NONE: {
      return true;
    }
    case Boundary_gSolid: {
      auto ptr = reinterpret_cast<const CityFB::gSolid *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Boundary_gMultiSurface: {
      auto ptr = reinterpret_cast<const CityFB::gMultiSurface *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyBoundaryVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyBoundary(
        verifier,  values->Get(i), types->GetEnum<Boundary>(i))) {
      return false;
    }
  }
  return true;
}

inline const CityFB::CityJSONFeature *GetCityJSONFeature(const void *buf) {
  return flatbuffers::GetRoot<CityFB::CityJSONFeature>(buf);
}

inline const CityFB::CityJSONFeature *GetSizePrefixedCityJSONFeature(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CityFB::CityJSONFeature>(buf);
}

inline const char *CityJSONFeatureIdentifier() {
  return "CFBF";
}

inline bool CityJSONFeatureBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, CityJSONFeatureIdentifier());
}

inline bool SizePrefixedCityJSONFeatureBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, CityJSONFeatureIdentifier(), true);
}

inline bool VerifyCityJSONFeatureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CityFB::CityJSONFeature>(CityJSONFeatureIdentifier());
}

inline bool VerifySizePrefixedCityJSONFeatureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CityFB::CityJSONFeature>(CityJSONFeatureIdentifier());
}

inline const char *CityJSONFeatureExtension() {
  return "city.fb";
}

inline void FinishCityJSONFeatureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CityFB::CityJSONFeature> root) {
  fbb.Finish(root, CityJSONFeatureIdentifier());
}

inline void FinishSizePrefixedCityJSONFeatureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CityFB::CityJSONFeature> root) {
  fbb.FinishSizePrefixed(root, CityJSONFeatureIdentifier());
}

}  // namespace CityFB

#endif  // FLATBUFFERS_GENERATED_CITYJSONFEATURE_CITYFB_H_
